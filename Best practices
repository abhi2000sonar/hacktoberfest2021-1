Style
Consistency is the most important aspect of style. The second most important aspect is following a style that the average C++ programmer is used to reading.

C++ allows for arbitrary-length identifier names, so there's no reason to be terse when naming things. Use descriptive names, and be consistent in the style.

CamelCase
snake_case
are common examples. snake_case has the advantage that it can also work with spell checkers, if desired.

Establishing A Style Guideline
Whatever style guidelines you establish, be sure to implement a .clang-format file that specifies the style you expect. While this cannot help with naming, it is particularly important for an open source project to maintain a consistent style.

Every IDE and many editors have support for clang-format built in or easily installable with an add-in.

VSCode: Microsoft C/C++ extension for VS Code
CLion: https://www.jetbrains.com/help/clion/clangformat-as-alternative-formatter.html
VisualStudio https://marketplace.visualstudio.com/items?itemName=LLVMExtensions.ClangFormat#review-details
Resharper++: https://www.jetbrains.com/help/resharper/2017.2/Using_Clang_Format.html
Vim
https://github.com/rhysd/vim-clang-format
https://github.com/chiel92/vim-autoformat
XCode: https://github.com/travisjeffery/ClangFormat-Xcode
Common C++ Naming Conventions
Types start with upper case: MyClass.
Functions and variables start with lower case: myMethod.
Constants are all upper case: const double PI=3.14159265358979323;.
C++ Standard Library (and other well-known C++ libraries like Boost) use these guidelines:

Macro names use upper case with underscores: INT_MAX.
Template parameter names use camel case: InputIterator.
All other names use snake case: unordered_map.
Distinguish Private Object Data
Name private data with a m_ prefix to distinguish it from public data. m_ stands for "member" data.
